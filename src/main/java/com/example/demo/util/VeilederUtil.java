package com.example.demo.util;

import com.example.demo.model.Forskrift;
import com.example.demo.model.Standard;
import com.example.demo.service.SporsmolService;
import com.example.demo.service.TilleggsinformasjonService;
import com.itextpdf.io.font.FontProgram;
import com.itextpdf.io.font.FontProgramFactory;
import com.itextpdf.kernel.colors.Color;
import com.itextpdf.kernel.colors.DeviceRgb;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfReader;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.kernel.pdf.action.PdfAction;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Text;
import com.itextpdf.layout.property.AreaBreakType;
import com.itextpdf.layout.element.AreaBreak;
import com.itextpdf.layout.element.Link;
import com.itextpdf.layout.element.ListItem;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Map;



/**
 * Utility class for generating PDF documents related to guidance processes.
 * This class provides methods for generating PDFs that combine several elements including a cover page,
 * list of standards and points, regulations, and additional information from various sources.
 */
public class VeilederUtil {
    
    /**
     * Loads the Calibri font from the specified path in the resources directory.
     * This font is used throughout the PDF documents generated by this utility.
     * 
     * @return The loaded PdfFont object
     * @throws IOException if there is an error loading the font
     */
    private PdfFont loadCalibriFont() throws IOException {
        FontProgram fontProgram = FontProgramFactory.createFont("src/main/resources/Calibri.ttf");
        return PdfFontFactory.createFont(fontProgram);
    }

    /**
     * Generates a PDF document containing a cover page (if available), a list of standards and their associated points,
     * detailed sections on each question's regulations, and any additional PDF content related to the questions.
     * 
     * @param standardPoeng a map where each key is a Standard object and each value is the integer points associated with that standard
     * @param sporsmolIds a list of question IDs to include in the PDF, each associated with its regulatory and additional information
     * @param tilleggsinformasjonService the service used to retrieve additional information such as cover pages
     * @param sporsmolService the service used to retrieve question details including associated regulations
     * @return a byte array containing the generated PDF document
     * @throws IOException if there is an error reading or writing PDF content
     */
    public byte[] generatePdf(Map<Standard, Integer> standardPoeng, java.util.List<Long> sporsmolIds, 
    TilleggsinformasjonService tilleggsinformasjonService, SporsmolService sporsmolService) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        PdfWriter writer = new PdfWriter(out);
        PdfDocument mainPdf = new PdfDocument(writer);

        // Add cover page if available
        if (tilleggsinformasjonService.hentForside() != null && tilleggsinformasjonService.hentForside().getPdfData() != null) {
            PdfDocument forsidePdf = new PdfDocument(new PdfReader(new ByteArrayInputStream
            (tilleggsinformasjonService.hentForside().getPdfData())));
            forsidePdf.copyPagesTo(1, forsidePdf.getNumberOfPages(), mainPdf);
            forsidePdf.close();
        }
        
        // Set up document with Calibri font
        PdfFont calibri = loadCalibriFont();
        Document document = new Document(mainPdf);
        document.setFont(calibri);

        document.add(new AreaBreak(AreaBreakType.NEXT_PAGE));

        // Add sections for standards and points
        if (standardPoeng != null && !standardPoeng.isEmpty()) {
            document.add(new Paragraph("Standarder og Poengsummer").setBold());
            com.itextpdf.layout.element.List list = new com.itextpdf.layout.element.List();
            standardPoeng.forEach((standard, poeng) -> {
                list.add(new ListItem(standard.getTittel() + " - Poeng: " + poeng));
            });
            document.add(list);
        }

        // Add details for each question's regulations and additional PDF content
        Color linkColor = new DeviceRgb(0, 112, 224);  // Specific blue color
        document.add(new Paragraph("Forskrifter").setFontSize(14));

        for (Long id : sporsmolIds) {
            sporsmolService.hentSporsmol(id).ifPresent(sporsmol -> {
                document.add(new Paragraph(""));
                if (!sporsmol.getForskrifter().isEmpty()) {
                    for (Forskrift forskrift : sporsmol.getForskrifter()) {
                        Paragraph forskriftPara = new Paragraph()
                        .add(new Text(forskrift.getTittel()).setFontSize(13))
                        .add("\nBeskrivelse: " + forskrift.getBeskrivelse()).setFontSize(11)
                        .add("\nPublisert: " + forskrift.getPubliseringsdato().toString()+"\n").setFontSize(11)
                        .add(new Link("Lenke til forskrift", PdfAction.createURI(forskrift.getUrl()))
                        .setFontColor(linkColor).setFontSize(11))
                        .setMarginBottom(10);
                    document.add(forskriftPara);
                    }
                }

                // Include any additional PDF content related to the question
                if (sporsmol.getTilleggsinformasjon() != null && sporsmol.getTilleggsinformasjon().getPdfData() != null) {
                    try (PdfDocument sporsmolPdf = new PdfDocument(new PdfReader(new ByteArrayInputStream
                    (sporsmol.getTilleggsinformasjon().getPdfData())))) {
                        sporsmolPdf.copyPagesTo(1, sporsmolPdf.getNumberOfPages(), mainPdf);
                    }
                     catch (Exception e) {
                    }
                }
            });
        }
        document.close();
        return out.toByteArray();  // Return the byte array
    }
}